name: CI/CD Pipeline for ONEHADA_BE

on:
  push:
    branches:
      - master # main 브랜치에 푸시할 때 실행
  pull_request:
    branches:
      - master # main 브랜치에 PR이 열릴 때 실행

jobs:
  build:
    runs-on: ubuntu-latest # Ubuntu 환경에서 실행

    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      # 1.1. 환경변수 설정
      - name: Set environment variables from APPLICATION_YML
        run: |
          echo "${{ secrets.APPLICATION_YML }}" > application.yml

          # 각 항목을 환경변수로 설정
          export SPRING_DATASOURCE_URL=$(yq eval '.spring.datasource.url' application.yml)
          export SPRING_DATASOURCE_USERNAME=$(yq eval '.spring.datasource.username' application.yml)
          export SPRING_DATASOURCE_PASSWORD=$(yq eval '.spring.datasource.password' application.yml)
          export SPRING_DATASOURCE_DRIVER=$(yq eval '.spring.datasource.driver-class-name' application.yml)

          export JWT_SECRET=$(yq eval '.jwt.secret' application.yml)
          export JWT_ACCESS_TOKEN_EXPIRATION=$(yq eval '.jwt.access.token.expiration' application.yml)
          export JWT_REFRESH_TOKEN_EXPIRATION=$(yq eval '.jwt.refresh.token.expiration' application.yml)

          export REDIS_HOST=$(yq eval '.spring.data.redis.host' application.yml)
          export REDIS_PORT=$(yq eval '.spring.data.redis.port' application.yml)
          export REDIS_PASSWORD=$(yq eval '.spring.data.redis.password' application.yml)
          export MONGODB_URI=$(yq eval '.spring.data.mongodb.uri' application.yml)

          echo "Environment variables set successfully."

        # 2. JDK 설치 (Spring 애플리케이션 빌드에 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Spring 애플리케이션 빌드에 사용할 Java 버전
          distribution: 'temurin' # JDK 배포판 지정

      # 3. Gradle 캐시 설정
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle을 사용하여 빌드 (테스트 생략)
      - name: Build with Gradle
        run: ./gradlew clean build -x test # 테스트는 생략 (-x test)

      # 5. Docker 설치 및 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6. Docker Hub에 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub 로그인 정보
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub 로그인 정보

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/onehada-be:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/onehada-be:latest

  # 8. 배포 작업: EC2 서버로 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build # build 작업이 완료된 후 실행됨

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 서버 IP
          username: ${{ secrets.EC2_USERNAME }} # EC2 서버 사용자 이름
          key: ${{ secrets.EC2_SSH_KEY }} # EC2 SSH private key
          port: 22
          script: |
            # 서버에서 Docker Compose로 이미지를 Pull하고 배포
            cd /usr/local/bin/
            docker-compose down # 도커 컴포즈 종료
            docker-compose pull  # 백엔드, 프론트엔드 이미지 풀
            docker-compose up -d  # 모든 서비스 실행
